//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class ApiClientBase {
  private readonly config: ITokenUtils;

  protected constructor(config: ITokenUtils) {
    this.config = config;
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  protected async transformOptions(options: any): Promise<any> {
    const token = await this.config.getToken();
    options.headers['Authorization'] = `Bearer ${token}`;
    return Promise.resolve(options);
  }
}

export interface ICreateTransactionClient {
    create(cardStatementId: string, message: CreateTransactionRequest): Promise<string>;
}

export class CreateTransactionClient extends ApiClientBase implements ICreateTransactionClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ITokenUtils, baseUrl?: string, instance?: AxiosInstance) {

        super(configuration);

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    create(cardStatementId: string, message: CreateTransactionRequest , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/card-statements/{cardStatementId}/transactions";
        if (cardStatementId === undefined || cardStatementId === null)
            throw new Error("The parameter 'cardStatementId' must be defined.");
        url_ = url_.replace("{cardStatementId}", encodeURIComponent("" + cardStatementId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(message);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return Promise.resolve<string>(result201);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export interface IDeleteTransactionClient {
    create(cardStatementId: string, id: string): Promise<void>;
}

export class DeleteTransactionClient extends ApiClientBase implements IDeleteTransactionClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ITokenUtils, baseUrl?: string, instance?: AxiosInstance) {

        super(configuration);

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    create(cardStatementId: string, id: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/card-statements/{cardStatementId}/transactions/{id}";
        if (cardStatementId === undefined || cardStatementId === null)
            throw new Error("The parameter 'cardStatementId' must be defined.");
        url_ = url_.replace("{cardStatementId}", encodeURIComponent("" + cardStatementId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IUpdateTransactionClient {
    create(transactionId: string | undefined, id: string, message: UpdateTransactionRequest): Promise<void>;
}

export class UpdateTransactionClient extends ApiClientBase implements IUpdateTransactionClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ITokenUtils, baseUrl?: string, instance?: AxiosInstance) {

        super(configuration);

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    create(transactionId: string | undefined, id: string, message: UpdateTransactionRequest , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/transactions/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (transactionId === null)
            throw new Error("The parameter 'transactionId' cannot be null.");
        else if (transactionId !== undefined)
            url_ += "transactionId=" + encodeURIComponent("" + transactionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(message);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface ICreateCardStatementClient {
    create(message: CreateCardStatementRequest): Promise<string>;
}

export class CreateCardStatementClient extends ApiClientBase implements ICreateCardStatementClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ITokenUtils, baseUrl?: string, instance?: AxiosInstance) {

        super(configuration);

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    create(message: CreateCardStatementRequest , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/card-statements";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(message);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return Promise.resolve<string>(result201);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export interface IGetCardStatementByMonthYearClient {
    get(cardId: string | undefined, monthYear: Date | undefined): Promise<CardStatementDto>;
}

export class GetCardStatementByMonthYearClient extends ApiClientBase implements IGetCardStatementByMonthYearClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ITokenUtils, baseUrl?: string, instance?: AxiosInstance) {

        super(configuration);

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    get(cardId: string | undefined, monthYear: Date | undefined , cancelToken?: CancelToken | undefined): Promise<CardStatementDto> {
        let url_ = this.baseUrl + "/card-statements?";
        if (cardId === null)
            throw new Error("The parameter 'cardId' cannot be null.");
        else if (cardId !== undefined)
            url_ += "CardId=" + encodeURIComponent("" + cardId) + "&";
        if (monthYear === null)
            throw new Error("The parameter 'monthYear' cannot be null.");
        else if (monthYear !== undefined)
            url_ += "MonthYear=" + encodeURIComponent(monthYear ? "" + monthYear.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<CardStatementDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CardStatementDto.fromJS(resultData200);
            return Promise.resolve<CardStatementDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CardStatementDto>(null as any);
    }
}

export interface IGetCardStatementClient {
    get(id: string): Promise<CardStatementDto>;
}

export class GetCardStatementClient extends ApiClientBase implements IGetCardStatementClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ITokenUtils, baseUrl?: string, instance?: AxiosInstance) {

        super(configuration);

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    get(id: string , cancelToken?: CancelToken | undefined): Promise<CardStatementDto> {
        let url_ = this.baseUrl + "/card-statements/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<CardStatementDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CardStatementDto.fromJS(resultData200);
            return Promise.resolve<CardStatementDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CardStatementDto>(null as any);
    }
}

export interface ICreateCardClient {
    create(message: CreateCardRequest): Promise<string>;
}

export class CreateCardClient extends ApiClientBase implements ICreateCardClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ITokenUtils, baseUrl?: string, instance?: AxiosInstance) {

        super(configuration);

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    create(message: CreateCardRequest , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/cards";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(message);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return Promise.resolve<string>(result201);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export interface IGetCardsClient {
    list(): Promise<GetCardsResponse>;
}

export class GetCardsClient extends ApiClientBase implements IGetCardsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ITokenUtils, baseUrl?: string, instance?: AxiosInstance) {

        super(configuration);

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    list(  cancelToken?: CancelToken | undefined): Promise<GetCardsResponse> {
        let url_ = this.baseUrl + "/cards";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processList(_response);
        });
    }

    protected processList(response: AxiosResponse): Promise<GetCardsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetCardsResponse.fromJS(resultData200);
            return Promise.resolve<GetCardsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetCardsResponse>(null as any);
    }
}

export interface IGetCardClient {
    get(id: string): Promise<CardDto>;
}

export class GetCardClient extends ApiClientBase implements IGetCardClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ITokenUtils, baseUrl?: string, instance?: AxiosInstance) {

        super(configuration);

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    get(id: string , cancelToken?: CancelToken | undefined): Promise<CardDto> {
        let url_ = this.baseUrl + "/cards/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<CardDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CardDto.fromJS(resultData200);
            return Promise.resolve<CardDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CardDto>(null as any);
    }
}

export interface IUpdateCardClient {
    update(id: string, message: Command): Promise<void>;
}

export class UpdateCardClient extends ApiClientBase implements IUpdateCardClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ITokenUtils, baseUrl?: string, instance?: AxiosInstance) {

        super(configuration);

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    update(id: string, message: Command , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/cards/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(message);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IGetBankCardsClient {
    get(): Promise<GetBankCardsResponse>;
}

export class GetBankCardsClient extends ApiClientBase implements IGetBankCardsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ITokenUtils, baseUrl?: string, instance?: AxiosInstance) {

        super(configuration);

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    get(  cancelToken?: CancelToken | undefined): Promise<GetBankCardsResponse> {
        let url_ = this.baseUrl + "/bank-cards";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<GetBankCardsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetBankCardsResponse.fromJS(resultData200);
            return Promise.resolve<GetBankCardsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetBankCardsResponse>(null as any);
    }
}

export class CreateTransactionRequest implements ICreateTransactionRequest {
    paymentType?: string | undefined;
    transactionCategory?: string | undefined;
    description?: string | undefined;
    date?: Date;
    amount?: number;

    constructor(data?: ICreateTransactionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentType = _data["paymentType"];
            this.transactionCategory = _data["transactionCategory"];
            this.description = _data["description"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): CreateTransactionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTransactionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentType"] = this.paymentType;
        data["transactionCategory"] = this.transactionCategory;
        data["description"] = this.description;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["amount"] = this.amount;
        return data;
    }
}

export interface ICreateTransactionRequest {
    paymentType?: string | undefined;
    transactionCategory?: string | undefined;
    description?: string | undefined;
    date?: Date;
    amount?: number;
}

export class UpdateTransactionRequest implements IUpdateTransactionRequest {
    cardStatementId?: string;
    paymentType?: string | undefined;
    transactionCategory?: string | undefined;
    description?: string | undefined;
    date?: Date;
    amount?: number;

    constructor(data?: IUpdateTransactionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cardStatementId = _data["cardStatementId"];
            this.paymentType = _data["paymentType"];
            this.transactionCategory = _data["transactionCategory"];
            this.description = _data["description"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): UpdateTransactionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTransactionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cardStatementId"] = this.cardStatementId;
        data["paymentType"] = this.paymentType;
        data["transactionCategory"] = this.transactionCategory;
        data["description"] = this.description;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["amount"] = this.amount;
        return data;
    }
}

export interface IUpdateTransactionRequest {
    cardStatementId?: string;
    paymentType?: string | undefined;
    transactionCategory?: string | undefined;
    description?: string | undefined;
    date?: Date;
    amount?: number;
}

export class CreateCardStatementRequest implements ICreateCardStatementRequest {
    cardId?: string;
    bankCardId?: string;
    monthYear?: Date;

    constructor(data?: ICreateCardStatementRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cardId = _data["cardId"];
            this.bankCardId = _data["bankCardId"];
            this.monthYear = _data["monthYear"] ? new Date(_data["monthYear"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateCardStatementRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCardStatementRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cardId"] = this.cardId;
        data["bankCardId"] = this.bankCardId;
        data["monthYear"] = this.monthYear ? this.monthYear.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateCardStatementRequest {
    cardId?: string;
    bankCardId?: string;
    monthYear?: Date;
}

export class CardStatementDto implements ICardStatementDto {
    id?: string | undefined;
    monthYear?: Date;
    statementReward?: CardStatementReward | undefined;
    transactions?: TransactionDto[] | undefined;

    constructor(data?: ICardStatementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.monthYear = _data["monthYear"] ? new Date(_data["monthYear"].toString()) : <any>undefined;
            this.statementReward = _data["statementReward"] ? CardStatementReward.fromJS(_data["statementReward"]) : <any>undefined;
            if (Array.isArray(_data["transactions"])) {
                this.transactions = [] as any;
                for (let item of _data["transactions"])
                    this.transactions!.push(TransactionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CardStatementDto {
        data = typeof data === 'object' ? data : {};
        let result = new CardStatementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["monthYear"] = this.monthYear ? this.monthYear.toISOString() : <any>undefined;
        data["statementReward"] = this.statementReward ? this.statementReward.toJSON() : <any>undefined;
        if (Array.isArray(this.transactions)) {
            data["transactions"] = [];
            for (let item of this.transactions)
                data["transactions"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICardStatementDto {
    id?: string | undefined;
    monthYear?: Date;
    statementReward?: CardStatementReward | undefined;
    transactions?: TransactionDto[] | undefined;
}

export abstract class ValueObject implements IValueObject {

    constructor(data?: IValueObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ValueObject {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ValueObject' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IValueObject {
}

export class CardStatementReward extends ValueObject implements ICardStatementReward {
    miles?: number | undefined;
    cashback?: number | undefined;
    points?: number | undefined;

    constructor(data?: ICardStatementReward) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.miles = _data["miles"];
            this.cashback = _data["cashback"];
            this.points = _data["points"];
        }
    }

    static fromJS(data: any): CardStatementReward {
        data = typeof data === 'object' ? data : {};
        let result = new CardStatementReward();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["miles"] = this.miles;
        data["cashback"] = this.cashback;
        data["points"] = this.points;
        super.toJSON(data);
        return data;
    }
}

export interface ICardStatementReward extends IValueObject {
    miles?: number | undefined;
    cashback?: number | undefined;
    points?: number | undefined;
}

export class TransactionDto implements ITransactionDto {
    id?: string | undefined;
    cardStatementId?: string | undefined;
    paymentType?: string | undefined;
    transactionCategory?: string | undefined;
    description?: string | undefined;
    date?: Date;
    amount?: number;

    constructor(data?: ITransactionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cardStatementId = _data["cardStatementId"];
            this.paymentType = _data["paymentType"];
            this.transactionCategory = _data["transactionCategory"];
            this.description = _data["description"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): TransactionDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cardStatementId"] = this.cardStatementId;
        data["paymentType"] = this.paymentType;
        data["transactionCategory"] = this.transactionCategory;
        data["description"] = this.description;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["amount"] = this.amount;
        return data;
    }
}

export interface ITransactionDto {
    id?: string | undefined;
    cardStatementId?: string | undefined;
    paymentType?: string | undefined;
    transactionCategory?: string | undefined;
    description?: string | undefined;
    date?: Date;
    amount?: number;
}

export class CreateCardRequest implements ICreateCardRequest {
    bankCardId?: string;
    name?: string | undefined;
    cardNumber?: string | undefined;
    startDate?: Date;

    constructor(data?: ICreateCardRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bankCardId = _data["bankCardId"];
            this.name = _data["name"];
            this.cardNumber = _data["cardNumber"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateCardRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCardRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bankCardId"] = this.bankCardId;
        data["name"] = this.name;
        data["cardNumber"] = this.cardNumber;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateCardRequest {
    bankCardId?: string;
    name?: string | undefined;
    cardNumber?: string | undefined;
    startDate?: Date;
}

export class CardDto implements ICardDto {
    id?: string | undefined;
    name?: string | undefined;
    bankCardId?: string | undefined;

    constructor(data?: ICardDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.bankCardId = _data["bankCardId"];
        }
    }

    static fromJS(data: any): CardDto {
        data = typeof data === 'object' ? data : {};
        let result = new CardDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["bankCardId"] = this.bankCardId;
        return data;
    }
}

export interface ICardDto {
    id?: string | undefined;
    name?: string | undefined;
    bankCardId?: string | undefined;
}

export class GetCardsResponse implements IGetCardsResponse {
    cards?: CardDto2[] | undefined;

    constructor(data?: IGetCardsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["cards"])) {
                this.cards = [] as any;
                for (let item of _data["cards"])
                    this.cards!.push(CardDto2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCardsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCardsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.cards)) {
            data["cards"] = [];
            for (let item of this.cards)
                data["cards"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetCardsResponse {
    cards?: CardDto2[] | undefined;
}

export class CardDto2 implements ICardDto2 {
    id?: string | undefined;
    name?: string | undefined;
    bankCardId?: string | undefined;

    constructor(data?: ICardDto2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.bankCardId = _data["bankCardId"];
        }
    }

    static fromJS(data: any): CardDto2 {
        data = typeof data === 'object' ? data : {};
        let result = new CardDto2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["bankCardId"] = this.bankCardId;
        return data;
    }
}

export interface ICardDto2 {
    id?: string | undefined;
    name?: string | undefined;
    bankCardId?: string | undefined;
}

export class Command implements ICommand {
    id?: string;
    bankCardId?: string;
    name?: string | undefined;
    cardNumber?: string | undefined;
    startDate?: Date;

    constructor(data?: ICommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.bankCardId = _data["bankCardId"];
            this.name = _data["name"];
            this.cardNumber = _data["cardNumber"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Command {
        data = typeof data === 'object' ? data : {};
        let result = new Command();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bankCardId"] = this.bankCardId;
        data["name"] = this.name;
        data["cardNumber"] = this.cardNumber;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICommand {
    id?: string;
    bankCardId?: string;
    name?: string | undefined;
    cardNumber?: string | undefined;
    startDate?: Date;
}

export class GetBankCardsResponse implements IGetBankCardsResponse {
    bankCards?: BankCardDto[] | undefined;

    constructor(data?: IGetBankCardsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["bankCards"])) {
                this.bankCards = [] as any;
                for (let item of _data["bankCards"])
                    this.bankCards!.push(BankCardDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetBankCardsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetBankCardsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.bankCards)) {
            data["bankCards"] = [];
            for (let item of this.bankCards)
                data["bankCards"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetBankCardsResponse {
    bankCards?: BankCardDto[] | undefined;
}

export class BankCardDto implements IBankCardDto {
    id?: string | undefined;
    name?: string | undefined;
    bank?: Bank | undefined;
    statementType?: StatementType | undefined;
    transactionDateType?: TransactionDateType | undefined;

    constructor(data?: IBankCardDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.bank = _data["bank"] ? Bank.fromJS(_data["bank"]) : <any>undefined;
            this.statementType = _data["statementType"] ? StatementType.fromJS(_data["statementType"]) : <any>undefined;
            this.transactionDateType = _data["transactionDateType"] ? TransactionDateType.fromJS(_data["transactionDateType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BankCardDto {
        data = typeof data === 'object' ? data : {};
        let result = new BankCardDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["bank"] = this.bank ? this.bank.toJSON() : <any>undefined;
        data["statementType"] = this.statementType ? this.statementType.toJSON() : <any>undefined;
        data["transactionDateType"] = this.transactionDateType ? this.transactionDateType.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBankCardDto {
    id?: string | undefined;
    name?: string | undefined;
    bank?: Bank | undefined;
    statementType?: StatementType | undefined;
    transactionDateType?: TransactionDateType | undefined;
}

export class Bank extends ValueObject implements IBank {
    name?: string | undefined;

    constructor(data?: IBank) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Bank {
        data = typeof data === 'object' ? data : {};
        let result = new Bank();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        super.toJSON(data);
        return data;
    }
}

export interface IBank extends IValueObject {
    name?: string | undefined;
}

export class StatementType extends ValueObject implements IStatementType {
    value?: string | undefined;

    constructor(data?: IStatementType) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): StatementType {
        data = typeof data === 'object' ? data : {};
        let result = new StatementType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data;
    }
}

export interface IStatementType extends IValueObject {
    value?: string | undefined;
}

export class TransactionDateType extends ValueObject implements ITransactionDateType {
    value?: string | undefined;

    constructor(data?: ITransactionDateType) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): TransactionDateType {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionDateType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data;
    }
}

export interface ITransactionDateType extends IValueObject {
    value?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

export interface ITokenUtils {
  getToken(): Promise<string>;
}